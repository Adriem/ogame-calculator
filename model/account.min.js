module.service("AccountLoader",function(Account){return{loadAccount:function(fileName){return out.verbose("Loading account from previous session"),Account.getFromTemplate(JSON.parse(localStorage.getItem(fileName)))},storeAccount:function(fileName,account){return out.verbose("Saving account"),localStorage.setItem(fileName,JSON.stringify(account))}}}),module.factory("Account",function(Planet){var Account;return Account=function(){function Account(plasmaLevel,geologist,planets){null==plasmaLevel&&(plasmaLevel=0),null==geologist&&(geologist=!1),null==planets&&(planets=[]),this.plasmaLevel=plasmaLevel,this.geologist=geologist,this.planets=planets}return Account.prototype.addPlanet=function(planet){return this.planets.push(planet)},Account.prototype.removePlanet=function(index){return this.planets.splice(index,1)},Account.prototype.movePlanet=function(startPos,finalPos){var auxPlanet;return auxPlanet=this.planets[startPos],this.removePlanet(startPos),this.planets.splice(finalPos,0,auxPlanet)},Account.prototype.getMetalProduction=function(){var i,len,planet,production,ref;for(production=0,ref=this.planets,i=0,len=ref.length;len>i;i++)planet=ref[i],production+=planet.getMetalProduction(this.plasmaLevel,this.geologist);return production},Account.prototype.getCrystalProduction=function(){var i,len,planet,production,ref;for(production=0,ref=this.planets,i=0,len=ref.length;len>i;i++)planet=ref[i],production+=planet.getCrystalProduction(this.plasmaLevel,this.geologist);return production},Account.prototype.getDeuteriumProduction=function(){var i,len,planet,production,ref;for(production=0,ref=this.planets,i=0,len=ref.length;len>i;i++)planet=ref[i],production+=planet.getDeuteriumProduction(this.plasmaLevel,this.geologist);return production},Account.getFromTemplate=function(templ){var account,planet;return null!=templ?(account=new Account(templ.plasmaLevel,templ.geologist,null!=templ.planets?function(){var i,len,ref,results;for(ref=templ.planets,results=[],i=0,len=ref.length;len>i;i++)planet=ref[i],results.push(Planet.getFromTemplate(planet));return results}():void 0),out.success("Data loaded successfully")):(account=new Account,out.error("Incorrect data input")),account},Account}()});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsL2FjY291bnQuY29mZmVlIiwibW9kZWwvYWNjb3VudC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJzZXJ2aWNlIiwiQWNjb3VudCIsImxvYWRBY2NvdW50IiwiZmlsZU5hbWUiLCJvdXQiLCJ2ZXJib3NlIiwiZ2V0RnJvbVRlbXBsYXRlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInN0b3JlQWNjb3VudCIsImFjY291bnQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZmFjdG9yeSIsIlBsYW5ldCIsInBsYXNtYUxldmVsIiwiZ2VvbG9naXN0IiwicGxhbmV0cyIsInRoaXMiLCJwcm90b3R5cGUiLCJhZGRQbGFuZXQiLCJwbGFuZXQiLCJwdXNoIiwicmVtb3ZlUGxhbmV0IiwiaW5kZXgiLCJzcGxpY2UiLCJtb3ZlUGxhbmV0Iiwic3RhcnRQb3MiLCJmaW5hbFBvcyIsImF1eFBsYW5ldCIsImdldE1ldGFsUHJvZHVjdGlvbiIsImkiLCJsZW4iLCJwcm9kdWN0aW9uIiwicmVmIiwibGVuZ3RoIiwiZ2V0Q3J5c3RhbFByb2R1Y3Rpb24iLCJnZXREZXV0ZXJpdW1Qcm9kdWN0aW9uIiwidGVtcGwiLCJyZXN1bHRzIiwic3VjY2VzcyIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsUUFBUSxnQkFBaUIsU0FBQ0MsU0NDL0IsT0RDQUMsWUFBYSxTQUFDQyxVQ0VWLE1EREZDLEtBQUlDLFFBQVEseUNBQ1pKLFFBQVFLLGdCQUFnQkMsS0FBS0MsTUFBTUMsYUFBYUMsUUFBUVAsYUFFMURRLGFBQWMsU0FBQ1IsU0FBVVMsU0NFckIsTURERlIsS0FBSUMsUUFBUSxrQkFDWkksYUFBYUksUUFBUVYsU0FBVUksS0FBS08sVUFBVUYsY0FSbERiLE9BV09nQixRQUFRLFVBQVcsU0FBQ0MsUUFFekIsR0FBQWYsUUNFQSxPREZNQSxTQUFBLFdBQ1MsUUFBQUEsU0FBQ2dCLFlBQWlCQyxVQUFtQkMsU0NHN0IsTUFBZkYsY0RIUUEsWUFBYyxHQ01ULE1BQWJDLFlETnlCQSxXQUFZLEdDUzFCLE1BQVhDLFVEVDRDQSxZQUNoREMsS0FBQ0gsWUFBY0EsWUFDZkcsS0FBQ0YsVUFBWUEsVUFDYkUsS0FBQ0QsUUFBVUEsUUNzRmIsTUR6RkFsQixTQUFBb0IsVUFLQUMsVUFBVyxTQUFDQyxRQ2FWLE1EWkFILE1BQUNELFFBQVFLLEtBQUtELFNBTmhCdEIsUUFBQW9CLFVBUUFJLGFBQWMsU0FBQ0MsT0NjYixNRGJBTixNQUFDRCxRQUFRUSxPQUFPRCxNQUFPLElBVHpCekIsUUFBQW9CLFVBV0FPLFdBQVksU0FBQ0MsU0FBVUMsVUFDckIsR0FBQUMsVUNpQkEsT0RqQkFBLFdBQVlYLEtBQUNELFFBQVFVLFVBQ3JCVCxLQUFDSyxhQUFhSSxVQUNkVCxLQUFDRCxRQUFRUSxPQUFPRyxTQUFVLEVBQUdDLFlBZC9COUIsUUFBQW9CLFVBZ0JBVyxtQkFBb0IsV0FDbEIsR0FBQUMsR0FBQUMsSUFBQVgsT0FBQVksV0FBQUMsR0FDQSxLQURBRCxXQUFhLEVBQ2JDLElBQUFoQixLQUFBRCxRQUFBYyxFQUFBLEVBQUFDLElBQUFFLElBQUFDLE9BQUFILElBQUFELEVBQUFBLElDbUJFVixPQUFTYSxJQUFJSCxHRGxCYkUsWUFBY1osT0FBT1MsbUJBQW1CWixLQUFDSCxZQUFhRyxLQUFDRixVQ3FCekQsT0RwQkFpQixhQXBCRmxDLFFBQUFvQixVQXNCQWlCLHFCQUFzQixXQUNwQixHQUFBTCxHQUFBQyxJQUFBWCxPQUFBWSxXQUFBQyxHQUNBLEtBREFELFdBQWEsRUFDYkMsSUFBQWhCLEtBQUFELFFBQUFjLEVBQUEsRUFBQUMsSUFBQUUsSUFBQUMsT0FBQUgsSUFBQUQsRUFBQUEsSUN3QkVWLE9BQVNhLElBQUlILEdEdkJiRSxZQUFjWixPQUFPZSxxQkFBcUJsQixLQUFDSCxZQUFhRyxLQUFDRixVQzBCM0QsT0R6QkFpQixhQTFCRmxDLFFBQUFvQixVQTRCQWtCLHVCQUF3QixXQUN0QixHQUFBTixHQUFBQyxJQUFBWCxPQUFBWSxXQUFBQyxHQUNBLEtBREFELFdBQWEsRUFDYkMsSUFBQWhCLEtBQUFELFFBQUFjLEVBQUEsRUFBQUMsSUFBQUUsSUFBQUMsT0FBQUgsSUFBQUQsRUFBQUEsSUM2QkVWLE9BQVNhLElBQUlILEdENUJiRSxZQUFjWixPQUFPZ0IsdUJBQXVCbkIsS0FBQ0gsWUFBYUcsS0FBQ0YsVUMrQjdELE9EOUJBaUIsYUFHRmxDLFFBQUNLLGdCQUFrQixTQUFDa0MsT0FDbEIsR0FBQTVCLFNBQUFXLE1Da0RBLE9EbERHLE9BQUFpQixPQUNENUIsUUFBYyxHQUFBWCxTQUNadUMsTUFBTXZCLFlBQ051QixNQUFNdEIsVUFDSCxNQUFBc0IsTUFBQXJCLFFBQUgsV0NnQ0EsR0FBSWMsR0FBR0MsSUFBS0UsSUFBS0ssT0FHakIsS0RsQ0dMLElBQUFJLE1BQUFyQixRQUFBc0IsV0FBQVIsRUFBQSxFQUFBQyxJQUFBRSxJQUFBQyxPQUFBSCxJQUFBRCxFQUFBQSxJQ21DRFYsT0FBU2EsSUFBSUgsR0RuQ1pRLFFBQUFqQixLQUFBUixPQUFPVixnQkFBZ0JpQixRQ3NDMUIsT0FBT2tCLFlEckNGLFFBRVByQyxJQUFJc0MsUUFBUSw4QkFFWjlCLFFBQWMsR0FBQVgsU0FDZEcsSUFBSXVDLE1BQU0seUJBQ1ovQixTQ3lDS1giLCJmaWxlIjoibW9kZWwvYWNjb3VudC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuc2VydmljZSAnQWNjb3VudExvYWRlcicsIChBY2NvdW50KSAtPlxyXG5cclxuICBsb2FkQWNjb3VudDogKGZpbGVOYW1lKSAtPlxyXG4gICAgb3V0LnZlcmJvc2UgXCJMb2FkaW5nIGFjY291bnQgZnJvbSBwcmV2aW91cyBzZXNzaW9uXCJcclxuICAgIEFjY291bnQuZ2V0RnJvbVRlbXBsYXRlKEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oZmlsZU5hbWUpKSlcclxuXHJcbiAgc3RvcmVBY2NvdW50OiAoZmlsZU5hbWUsIGFjY291bnQpIC0+XHJcbiAgICBvdXQudmVyYm9zZSBcIlNhdmluZyBhY2NvdW50XCJcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGZpbGVOYW1lLCBKU09OLnN0cmluZ2lmeShhY2NvdW50KSlcclxuXHJcblxyXG5tb2R1bGUuZmFjdG9yeSAnQWNjb3VudCcsIChQbGFuZXQpIC0+XHJcblxyXG4gIGNsYXNzIEFjY291bnRcclxuICAgIGNvbnN0cnVjdG9yOiAocGxhc21hTGV2ZWwgPSAwLCBnZW9sb2dpc3QgPSBmYWxzZSwgcGxhbmV0cyA9IFtdKSAtPlxyXG4gICAgICBAcGxhc21hTGV2ZWwgPSBwbGFzbWFMZXZlbFxyXG4gICAgICBAZ2VvbG9naXN0ID0gZ2VvbG9naXN0XHJcbiAgICAgIEBwbGFuZXRzID0gcGxhbmV0cyAjIFRoaXMgaXMgbm90IHNhZmUhXHJcblxyXG4gICAgYWRkUGxhbmV0OiAocGxhbmV0KSAtPlxyXG4gICAgICBAcGxhbmV0cy5wdXNoKHBsYW5ldClcclxuXHJcbiAgICByZW1vdmVQbGFuZXQ6IChpbmRleCkgLT5cclxuICAgICAgQHBsYW5ldHMuc3BsaWNlKGluZGV4LCAxKVxyXG5cclxuICAgIG1vdmVQbGFuZXQ6IChzdGFydFBvcywgZmluYWxQb3MpIC0+XHJcbiAgICAgIGF1eFBsYW5ldCA9IEBwbGFuZXRzW3N0YXJ0UG9zXVxyXG4gICAgICBAcmVtb3ZlUGxhbmV0KHN0YXJ0UG9zKVxyXG4gICAgICBAcGxhbmV0cy5zcGxpY2UoZmluYWxQb3MsIDAsIGF1eFBsYW5ldClcclxuXHJcbiAgICBnZXRNZXRhbFByb2R1Y3Rpb246IC0+XHJcbiAgICAgIHByb2R1Y3Rpb24gPSAwXHJcbiAgICAgIGZvciBwbGFuZXQgaW4gQHBsYW5ldHNcclxuICAgICAgICBwcm9kdWN0aW9uICs9IHBsYW5ldC5nZXRNZXRhbFByb2R1Y3Rpb24oQHBsYXNtYUxldmVsLCBAZ2VvbG9naXN0KVxyXG4gICAgICBwcm9kdWN0aW9uXHJcblxyXG4gICAgZ2V0Q3J5c3RhbFByb2R1Y3Rpb246IC0+XHJcbiAgICAgIHByb2R1Y3Rpb24gPSAwXHJcbiAgICAgIGZvciBwbGFuZXQgaW4gQHBsYW5ldHNcclxuICAgICAgICBwcm9kdWN0aW9uICs9IHBsYW5ldC5nZXRDcnlzdGFsUHJvZHVjdGlvbihAcGxhc21hTGV2ZWwsIEBnZW9sb2dpc3QpXHJcbiAgICAgIHByb2R1Y3Rpb25cclxuXHJcbiAgICBnZXREZXV0ZXJpdW1Qcm9kdWN0aW9uOiAtPlxyXG4gICAgICBwcm9kdWN0aW9uID0gMFxyXG4gICAgICBmb3IgcGxhbmV0IGluIEBwbGFuZXRzXHJcbiAgICAgICAgcHJvZHVjdGlvbiArPSBwbGFuZXQuZ2V0RGV1dGVyaXVtUHJvZHVjdGlvbihAcGxhc21hTGV2ZWwsIEBnZW9sb2dpc3QpXHJcbiAgICAgIHByb2R1Y3Rpb25cclxuXHJcbiAgICAjIyMgU1RBVElDICMjI1xyXG4gICAgQGdldEZyb21UZW1wbGF0ZSA9ICh0ZW1wbCkgLT5cclxuICAgICAgaWYgdGVtcGw/XHJcbiAgICAgICAgYWNjb3VudCA9IG5ldyBBY2NvdW50KFxyXG4gICAgICAgICAgdGVtcGwucGxhc21hTGV2ZWwsXHJcbiAgICAgICAgICB0ZW1wbC5nZW9sb2dpc3QsXHJcbiAgICAgICAgICBpZiB0ZW1wbC5wbGFuZXRzP1xyXG4gICAgICAgICAgICAoUGxhbmV0LmdldEZyb21UZW1wbGF0ZShwbGFuZXQpIGZvciBwbGFuZXQgaW4gdGVtcGwucGxhbmV0cylcclxuICAgICAgICAgIGVsc2UgdW5kZWZpbmVkXHJcbiAgICAgICAgKVxyXG4gICAgICAgIG91dC5zdWNjZXNzIFwiRGF0YSBsb2FkZWQgc3VjY2Vzc2Z1bGx5XCJcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGFjY291bnQgPSBuZXcgQWNjb3VudCgpXHJcbiAgICAgICAgb3V0LmVycm9yIFwiSW5jb3JyZWN0IGRhdGEgaW5wdXRcIlxyXG4gICAgICBhY2NvdW50IixudWxsXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=