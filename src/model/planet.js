module.factory('Planet', function() {
  var Planet;
  Planet = function(name, coordinates, maxTemp) {
    this.name = name;
    this.coordinates = coordinates;
    this.maxTemp = maxTemp;
    this.metalMine = 0;
    this.crystalMine = 0;
    this.deuteriumMine = 0;
    this.metalBonus = 0;
    this.crystalBonus = 0;
    this.deuteriumBonus = 0;
    return null;
  };
  Planet.prototype.getMetalProduction = function(plasma, geologist) {
    var baseStat, bonusMultiplier, geoMultiplier, production;
    if (plasma == null) {
      plasma = 0;
    }
    if (geologist == null) {
      geologist = false;
    }
    bonusMultiplier = 1 + this.metalBonus * 0.1;
    geoMultiplier = geologist ? 1.1 : 1;
    baseStat = 30 * this.metalMine * Math.pow(1.1, this.metalMine);
    production = (baseStat * bonusMultiplier) * geoMultiplier;
    return Math.round(production + baseStat * plasma * 0.01) + 30;
  };
  Planet.prototype.getCrystalProduction = function(plasma, geologist) {
    var baseStat, bonusMultiplier, geoMultiplier, production;
    if (plasma == null) {
      plasma = 0;
    }
    if (geologist == null) {
      geologist = false;
    }
    bonusMultiplier = 1 + this.crystalBonus * 0.1;
    geoMultiplier = geologist ? 1.1 : 1;
    baseStat = 20 * this.crystalMine * Math.pow(1.1, this.crystalMine);
    production = (baseStat * bonusMultiplier) * geoMultiplier;
    return Math.round(production + baseStat * plasma * 0.0066 - 0.5) + 15;
  };
  Planet.prototype.getDeuteriumProduction = function(plasma, geologist) {
    var baseStat, bonusMultiplier, geoMultiplier, production;
    if (geologist == null) {
      geologist = false;
    }
    bonusMultiplier = 1 + this.deuteriumBonus * 0.1;
    geoMultiplier = geologist ? 1.1 : 1;
    baseStat = 10 * this.deuteriumMine * Math.pow(1.1, this.deuteriumMine) * (1.44 - 0.004 * this.maxTemp);
    production = (baseStat * bonusMultiplier) * geoMultiplier;
    return Math.round(production);
  };
  return Planet;
});

//# sourceMappingURL=data:application/json;base64,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QWxCLEdBQTJCLENBRDNDLENBQUE7QUFBQSxJQUVBLFFBQUEsR0FBVyxFQUFBLEdBQUssSUFBQyxDQUFBLGFBQU4sR0FBc0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxHQUFULEVBQWMsSUFBQyxDQUFBLGFBQWYsQ0FBdEIsR0FBc0QsQ0FBQyxJQUFBLEdBQU8sS0FBQSxHQUFNLElBQUMsQ0FBQSxPQUFmLENBRmpFLENBQUE7QUFBQSxJQUdBLFVBQUEsR0FBYSxDQUFDLFFBQUEsR0FBUyxlQUFWLENBQUEsR0FBMkIsYUFIeEMsQ0FBQTtXQUlBLElBQUksQ0FBQyxLQUFMLENBQVcsVUFBWCxFQUx3QztFQUFBLENBMUIxQyxDQUFBO0FBaUNBLFNBQU8sTUFBUCxDQW5DdUI7QUFBQSxDQUF6QixDQUFBLENBQUEiLCJmaWxlIjoibW9kZWwvcGxhbmV0LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmZhY3RvcnkgJ1BsYW5ldCcsIC0+XHJcblxyXG4gIFBsYW5ldCA9IChuYW1lLCBjb29yZGluYXRlcywgbWF4VGVtcCkgLT5cclxuICAgIEBuYW1lID0gbmFtZVxyXG4gICAgQGNvb3JkaW5hdGVzID0gY29vcmRpbmF0ZXNcclxuICAgIEBtYXhUZW1wID0gbWF4VGVtcFxyXG4gICAgQG1ldGFsTWluZSA9IDBcclxuICAgIEBjcnlzdGFsTWluZSA9IDBcclxuICAgIEBkZXV0ZXJpdW1NaW5lID0gMFxyXG4gICAgQG1ldGFsQm9udXMgPSAwXHJcbiAgICBAY3J5c3RhbEJvbnVzID0gMFxyXG4gICAgQGRldXRlcml1bUJvbnVzID0gMFxyXG4gICAgbnVsbFxyXG5cclxuICBQbGFuZXQucHJvdG90eXBlLmdldE1ldGFsUHJvZHVjdGlvbiA9IChwbGFzbWEgPSAwLCBnZW9sb2dpc3QgPSBmYWxzZSkgLT5cclxuICAgIGJvbnVzTXVsdGlwbGllciA9IDEgKyBAbWV0YWxCb251cyAqIDAuMVxyXG4gICAgZ2VvTXVsdGlwbGllciA9IGlmIGdlb2xvZ2lzdCB0aGVuIDEuMSBlbHNlIDFcclxuICAgIGJhc2VTdGF0ID0gMzAgKiBAbWV0YWxNaW5lICogTWF0aC5wb3coMS4xLCBAbWV0YWxNaW5lKVxyXG4gICAgcHJvZHVjdGlvbiA9IChiYXNlU3RhdCAqIGJvbnVzTXVsdGlwbGllcikgKiBnZW9NdWx0aXBsaWVyXHJcbiAgICBNYXRoLnJvdW5kKHByb2R1Y3Rpb24gKyBiYXNlU3RhdCAqIHBsYXNtYSAqIDAuMDEpICsgMzBcclxuXHJcbiAgUGxhbmV0LnByb3RvdHlwZS5nZXRDcnlzdGFsUHJvZHVjdGlvbiA9IChwbGFzbWEgPSAwLCBnZW9sb2dpc3QgPSBmYWxzZSkgLT5cclxuICAgIGJvbnVzTXVsdGlwbGllciA9IDEgKyBAY3J5c3RhbEJvbnVzICogMC4xXHJcbiAgICBnZW9NdWx0aXBsaWVyID0gaWYgZ2VvbG9naXN0IHRoZW4gMS4xIGVsc2UgMVxyXG4gICAgYmFzZVN0YXQgPSAyMCAqIEBjcnlzdGFsTWluZSAqIE1hdGgucG93KDEuMSwgQGNyeXN0YWxNaW5lKVxyXG4gICAgcHJvZHVjdGlvbiA9IChiYXNlU3RhdCAqIGJvbnVzTXVsdGlwbGllcikgKiBnZW9NdWx0aXBsaWVyXHJcbiAgICBNYXRoLnJvdW5kKHByb2R1Y3Rpb24gKyBiYXNlU3RhdCAqIHBsYXNtYSAqIDAuMDA2NiAtIDAuNSkgKyAxNVxyXG5cclxuICBQbGFuZXQucHJvdG90eXBlLmdldERldXRlcml1bVByb2R1Y3Rpb24gPSAocGxhc21hLCBnZW9sb2dpc3QgPSBmYWxzZSkgLT5cclxuICAgIGJvbnVzTXVsdGlwbGllciA9IDEgKyBAZGV1dGVyaXVtQm9udXMgKiAwLjFcclxuICAgIGdlb011bHRpcGxpZXIgPSBpZiBnZW9sb2dpc3QgdGhlbiAxLjEgZWxzZSAxXHJcbiAgICBiYXNlU3RhdCA9IDEwICogQGRldXRlcml1bU1pbmUgKiBNYXRoLnBvdygxLjEsIEBkZXV0ZXJpdW1NaW5lKSAqICgxLjQ0IC0gMC4wMDQqQG1heFRlbXApXHJcbiAgICBwcm9kdWN0aW9uID0gKGJhc2VTdGF0KmJvbnVzTXVsdGlwbGllcikqZ2VvTXVsdGlwbGllclxyXG4gICAgTWF0aC5yb3VuZChwcm9kdWN0aW9uKVxyXG5cclxuICByZXR1cm4gUGxhbmV0Il19